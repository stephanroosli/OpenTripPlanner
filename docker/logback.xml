<configuration>

  <!--
    This suppresses the meta-log entries about Logback configuration (how Java).
    This is a stopgap measure.
    The right solution is to make sure there are not logback.xml files from our dependency libraries on the classpath.
   -->
  <statusListener class="ch.qos.logback.core.status.NopStatusListener" />

  <!-- This will push these level changes onto JUL. Otherwise, JUL defaults to a high threshold
       for logging and debug log messages will never make it to slf4j. -->
  <contextListener class="ch.qos.logback.classic.jul.LevelChangePropagator"/>

  <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
      <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
          <providers>
              <!-- provides the timestamp <timestamp/> -->
              <!-- provides the version <version/> -->
              <!-- provides the fields in the configured pattern -->
              <pattern>
                  <!-- the pattern that defines what to include -->
                  <pattern>
                      {
                      "serviceContext": {
                          "service": "otp2"
                      },
                      "message": "%message\n%ex{full}",
                      "severity": "%level",
                      "reportLocation": {
                          "filePath": "%logger",
                          "lineNumber": "%line",
                          "functionName": "%method"
                      }
                      }
                  </pattern>
              </pattern>
          </providers>
      </encoder>
  </appender>

  <!-- Change this to debug to let more messages through. -->
  <root level="info">
    <appender-ref ref="console" />
  </root>
  <logger name="ch.qos.logback" level="warn"/>
  <logger name="com" level="info"/>
  <logger name="org" level="info"/>
  <logger name="com.amazonaws" level="info"/>
  <logger name="org.apache.http" level="info" />
  <logger name="com.conveyal" level="info"/>

  <logger name="org.opentripplanner.graph_builder.module.DirectTransferGenerator" level="info" />
  <logger name="org.opentripplanner" level="info" />
  <logger name="org.opentripplanner.analyst" level="info" />
  <logger name="org.opentripplanner.routing" level="info" />
  <logger name="org.opentripplanner.routing.impl.RetryingPathServiceImpl" level="info" />
  <logger name="org.opentripplanner.routing.algorithm.GenericAStar" level="info" />
  <!-- Avoid printing debug messages about free-flowing vertices -->
  <logger name="org.opentripplanner.routing.vertextype.IntersectionVertex" level="info" />
  <!-- Avoid printing debug messages when walk limits are exceeded -->
  <logger name="org.opentripplanner.routing.edgetype.PlainStreetEdge" level="info" />
  <!-- Avoid printing info messages about calendars when building graph -->
  <logger name="org.onebusaway.gtfs.impl.calendar.CalendarServiceDataFactoryImpl" level="warn" />
  <!-- Avoid printing ugly warning message when unable to create websocket connection -->
  <logger name="com.ning.http.client.providers.netty.NettyAsyncHttpProvider" level="error" />
  <logger name="com.sun.jersey" level="warn" />
  <!-- Suppress an inconsequential IOException that is logged at debug level. -->
  <logger name="org.glassfish.grizzly" level="info" />

</configuration>
